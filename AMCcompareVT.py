import os
import pandas as pd
import nltk
from nltk.sentiment import SentimentIntensityAnalyzer
from textblob import TextBlob
import numpy as np

# This file calculates the agreement level of the sentiment scores generated by Vader and TextBlob on the same corpus(AMC)

# Ensure NLTK VADER lexicon is downloaded
nltk.download('vader_lexicon')

# Initialize VADER sentiment analyzer
sia = SentimentIntensityAnalyzer()

# Define the directory containing text files
dir = 'D:/Msc/Final Project/Analogy Matreials Corpus AMC/Psychology Texts'
# dir = 'D:/Msc/Final Project/Analogy Matreials Corpus AMC/Llama2 Analogy Matreials Corpus'

def analyze_sentiment_in_directory(directory):
    results = []

    # Process each file in the directory
    for filename in os.listdir(directory):
        if filename.endswith('.txt'):
            file_path = os.path.join(directory, filename)
            try:
                with open(file_path, 'r', encoding='utf-8') as file:
                    text = file.read()
                    # Get VADER compound score
                    vader_score = sia.polarity_scores(text)['compound']
                    # Get TextBlob polarity score
                    textblob_score = TextBlob(text).sentiment.polarity
                    # Store results
                    results.append({
                        'filename': filename,
                        'vader_score': vader_score,
                        'textblob_score': textblob_score,
                        'difference': np.abs(vader_score - textblob_score)
                    })
            except UnicodeDecodeError:
                print(f"Failed to decode {filename}, skipped.")

    return results

# Analyze sentiment scores for the directory
sentiment_scores = analyze_sentiment_in_directory(dir)

# Convert results to DataFrame for easier handling
df = pd.DataFrame(sentiment_scores)

# Define the function to categorize agreement based on differences in scores
def categorize_difference(difference):
    if difference <= 0.1:
        return 'Agreement'
    elif difference <= 0.5:
        return 'Mild Disagreement'
    else:
        return 'Strong Disagreement'

# Apply categorization of differences
df['agreement_level'] = df['difference'].apply(categorize_difference)

# Print results
print(df[['filename', 'agreement_level']])

# Count and print the agreement levels
agreement_counts = df['agreement_level'].value_counts()
print("Agreement Level Counts:")
print(agreement_counts)
